// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'ffi.io.dart' if (dart.library.html) 'ffi.web.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) => NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) => NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<WorldManager> createWorldManager({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_world_manager(port_),
      parseSuccessData: (d) => _wire2api_world_manager(d),
      constMeta: kCreateWorldManagerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateWorldManagerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_world_manager",
        argNames: [],
      );

  Future<int> whatIsTheAnswer({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_what_is_the_answer(port_),
      parseSuccessData: _wire2api_i32,
      constMeta: kWhatIsTheAnswerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWhatIsTheAnswerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "what_is_the_answer",
        argNames: [],
      );

  Future<void> addBlockMethodWorldManager({required WorldManager that, required GlobalPosition position, required String block, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_world_manager(that);
    var arg1 = _platform.api2wire_box_autoadd_global_position(position);
    var arg2 = _platform.api2wire_String(block);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add_block__method__WorldManager(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kAddBlockMethodWorldManagerConstMeta,
      argValues: [
        that,
        position,
        block
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddBlockMethodWorldManagerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "add_block__method__WorldManager",
        argNames: [
          "that",
          "position",
          "block"
        ],
      );

  Future<void> removeBlockMethodWorldManager({required WorldManager that, required GlobalPosition position, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_world_manager(that);
    var arg1 = _platform.api2wire_box_autoadd_global_position(position);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_remove_block__method__WorldManager(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kRemoveBlockMethodWorldManagerConstMeta,
      argValues: [
        that,
        position
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRemoveBlockMethodWorldManagerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "remove_block__method__WorldManager",
        argNames: [
          "that",
          "position"
        ],
      );

  Future<void> addEntityMethodWorldManager({required WorldManager that, required String entity, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_world_manager(that);
    var arg1 = _platform.api2wire_String(entity);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add_entity__method__WorldManager(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kAddEntityMethodWorldManagerConstMeta,
      argValues: [
        that,
        entity
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddEntityMethodWorldManagerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "add_entity__method__WorldManager",
        argNames: [
          "that",
          "entity"
        ],
      );

  Future<int> entitiesMethodWorldManager({required WorldManager that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_world_manager(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_entities__method__WorldManager(port_, arg0),
      parseSuccessData: _wire2api_usize,
      constMeta: kEntitiesMethodWorldManagerConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEntitiesMethodWorldManagerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "entities__method__WorldManager",
        argNames: [
          "that"
        ],
      );

  Stream<NativeMessage> createMessageStreamMethodWorldManager({required WorldManager that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_world_manager(that);
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_message_stream__method__WorldManager(port_, arg0),
      parseSuccessData: _wire2api_native_message,
      constMeta: kCreateMessageStreamMethodWorldManagerConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateMessageStreamMethodWorldManagerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_message_stream__method__WorldManager",
        argNames: [
          "that"
        ],
      );

  Future<GlobalPosition> playerPositionMethodWorldManager({required WorldManager that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_world_manager(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_player_position__method__WorldManager(port_, arg0),
      parseSuccessData: _wire2api_global_position,
      constMeta: kPlayerPositionMethodWorldManagerConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlayerPositionMethodWorldManagerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "player_position__method__WorldManager",
        argNames: [
          "that"
        ],
      );

  Future<void> sendMessageMethodWorldManager({required WorldManager that, required NativeMessage message, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_world_manager(that);
    var arg1 = _platform.api2wire_box_autoadd_native_message(message);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_message__method__WorldManager(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSendMessageMethodWorldManagerConstMeta,
      argValues: [
        that,
        message
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendMessageMethodWorldManagerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_message__method__WorldManager",
        argNames: [
          "that",
          "message"
        ],
      );

  Future<void> movePlayerMethodWorldManager({required WorldManager that, required int x, required int y, required int z, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_world_manager(that);
    var arg1 = _platform.api2wire_i64(x);
    var arg2 = _platform.api2wire_i64(y);
    var arg3 = _platform.api2wire_i64(z);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_move_player__method__WorldManager(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_unit,
      constMeta: kMovePlayerMethodWorldManagerConstMeta,
      argValues: [
        that,
        x,
        y,
        z
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMovePlayerMethodWorldManagerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "move_player__method__WorldManager",
        argNames: [
          "that",
          "x",
          "y",
          "z"
        ],
      );

  DropFnType get dropOpaqueMutexOptionStreamSinkNativeMessage => _platform.inner.drop_opaque_MutexOptionStreamSinkNativeMessage;
  ShareFnType get shareOpaqueMutexOptionStreamSinkNativeMessage => _platform.inner.share_opaque_MutexOptionStreamSinkNativeMessage;
  OpaqueTypeFinalizer get MutexOptionStreamSinkNativeMessageFinalizer => _platform.MutexOptionStreamSinkNativeMessageFinalizer;

  DropFnType get dropOpaqueMutexPlayer => _platform.inner.drop_opaque_MutexPlayer;
  ShareFnType get shareOpaqueMutexPlayer => _platform.inner.share_opaque_MutexPlayer;
  OpaqueTypeFinalizer get MutexPlayerFinalizer => _platform.MutexPlayerFinalizer;

  DropFnType get dropOpaqueMutexWorld => _platform.inner.drop_opaque_MutexWorld;
  ShareFnType get shareOpaqueMutexWorld => _platform.inner.share_opaque_MutexWorld;
  OpaqueTypeFinalizer get MutexWorldFinalizer => _platform.MutexWorldFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  MutexOptionStreamSinkNativeMessage _wire2api_MutexOptionStreamSinkNativeMessage(dynamic raw) {
    return MutexOptionStreamSinkNativeMessage.fromRaw(
      raw[0],
      raw[1],
    );
  }

  MutexPlayer _wire2api_MutexPlayer(dynamic raw) {
    return MutexPlayer.fromRaw(
      raw[0],
      raw[1],
    );
  }

  MutexWorld _wire2api_MutexWorld(dynamic raw) {
    return MutexWorld.fromRaw(
      raw[0],
      raw[1],
    );
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  BlockInformation _wire2api_block_information(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return BlockInformation(
      name: _wire2api_String(arr[0]),
      position: _wire2api_chunk_position(arr[1]),
    );
  }

  BlockInformation _wire2api_box_autoadd_block_information(dynamic raw) {
    return _wire2api_block_information(raw);
  }

  ChunkLocation _wire2api_box_autoadd_chunk_location(dynamic raw) {
    return _wire2api_chunk_location(raw);
  }

  ChunkPosition _wire2api_box_autoadd_chunk_position(dynamic raw) {
    return _wire2api_chunk_position(raw);
  }

  ChunkLocation _wire2api_chunk_location(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ChunkLocation(
      field0: _wire2api_i32(arr[0]),
      field1: _wire2api_i32(arr[1]),
      field2: _wire2api_i32(arr[2]),
    );
  }

  ChunkPosition _wire2api_chunk_position(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ChunkPosition(
      field0: _wire2api_i8(arr[0]),
      field1: _wire2api_i8(arr[1]),
      field2: _wire2api_i8(arr[2]),
    );
  }

  GlobalPosition _wire2api_global_position(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GlobalPosition(
      field0: _wire2api_chunk_location(arr[0]),
      field1: _wire2api_chunk_position(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_i8(dynamic raw) {
    return raw as int;
  }

  List<BlockInformation> _wire2api_list_block_information(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_block_information).toList();
  }

  NativeMessage _wire2api_native_message(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return NativeMessage_AddBlock(
          chunk: _wire2api_box_autoadd_chunk_location(raw[1]),
          block: _wire2api_box_autoadd_block_information(raw[2]),
        );
      case 1:
        return NativeMessage_RemoveBlock(
          position: _wire2api_box_autoadd_chunk_position(raw[1]),
          chunk: _wire2api_box_autoadd_chunk_location(raw[2]),
        );
      case 2:
        return NativeMessage_AddChunk(
          location: _wire2api_box_autoadd_chunk_location(raw[1]),
          blocks: _wire2api_list_block_information(raw[2]),
        );
      case 3:
        return NativeMessage_RemoveChunk(
          location: _wire2api_box_autoadd_chunk_location(raw[1]),
        );
      case 4:
        return NativeMessage_PlayerTeleported(
          x: _wire2api_i64(raw[1]),
          y: _wire2api_i64(raw[2]),
          z: _wire2api_i64(raw[3]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }

  WorldManager _wire2api_world_manager(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return WorldManager(
      world: _wire2api_MutexWorld(arr[0]),
      sink: _wire2api_MutexOptionStreamSinkNativeMessage(arr[1]),
      player: _wire2api_MutexPlayer(arr[2]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_i8(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
