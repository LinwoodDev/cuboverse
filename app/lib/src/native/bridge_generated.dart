// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'ffi.io.dart' if (dart.library.html) 'ffi.web.dart';
import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) => NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) => NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<WorldManager> createWorldManager({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_world_manager(port_),
      parseSuccessData: (d) => _wire2api_world_manager(d),
      constMeta: kCreateWorldManagerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreateWorldManagerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_world_manager",
        argNames: [],
      );

  Future<int> whatIsTheAnswer({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_what_is_the_answer(port_),
      parseSuccessData: _wire2api_i32,
      constMeta: kWhatIsTheAnswerConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kWhatIsTheAnswerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "what_is_the_answer",
        argNames: [],
      );

  Future<void> addEntityMethodWorldManager({required WorldManager that, required String entity, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_world_manager(that);
    var arg1 = _platform.api2wire_String(entity);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_add_entity__method__WorldManager(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kAddEntityMethodWorldManagerConstMeta,
      argValues: [
        that,
        entity
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAddEntityMethodWorldManagerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "add_entity__method__WorldManager",
        argNames: [
          "that",
          "entity"
        ],
      );

  Future<int> entitiesMethodWorldManager({required WorldManager that, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_world_manager(that);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_entities__method__WorldManager(port_, arg0),
      parseSuccessData: _wire2api_usize,
      constMeta: kEntitiesMethodWorldManagerConstMeta,
      argValues: [
        that
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kEntitiesMethodWorldManagerConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "entities__method__WorldManager",
        argNames: [
          "that"
        ],
      );

  DropFnType get dropOpaqueMutexWorld => _platform.inner.drop_opaque_MutexWorld;
  ShareFnType get shareOpaqueMutexWorld => _platform.inner.share_opaque_MutexWorld;
  OpaqueTypeFinalizer get MutexWorldFinalizer => _platform.MutexWorldFinalizer;

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  MutexWorld _wire2api_MutexWorld(dynamic raw) {
    return MutexWorld.fromRaw(
      raw[0],
      raw[1],
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  int _wire2api_usize(dynamic raw) {
    return castInt(raw);
  }

  WorldManager _wire2api_world_manager(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return WorldManager(
      world: _wire2api_MutexWorld(arr[0]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer
