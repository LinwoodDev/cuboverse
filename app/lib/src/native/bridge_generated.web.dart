// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'ffi.io.dart' if (dart.library.html) 'ffi.web.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';

class NativePlatform extends FlutterRustBridgeBase<NativeWire> with FlutterRustBridgeSetupMixin {
  NativePlatform(FutureOr<WasmModule> dylib) : super(NativeWire(dylib)) {
    setupMixinConstructor();
  }
  Future<void> setup() => inner.init;

// Section: api2wire

  @protected
  Object api2wire_MutexOptionStreamSinkNativeMessage(MutexOptionStreamSinkNativeMessage raw) {
    return raw.shareOrMove();
  }

  @protected
  Object api2wire_MutexWorld(MutexWorld raw) {
    return raw.shareOrMove();
  }

  @protected
  String api2wire_String(String raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_box_autoadd_world_manager(WorldManager raw) {
    return api2wire_world_manager(raw);
  }

  @protected
  Uint8List api2wire_uint_8_list(Uint8List raw) {
    return raw;
  }

  @protected
  List<dynamic> api2wire_world_manager(WorldManager raw) {
    return [
      api2wire_MutexWorld(raw.world),
      api2wire_MutexOptionStreamSinkNativeMessage(raw.sink)
    ];
  }
// Section: finalizer

  late final Finalizer<PlatformPointer> _MutexOptionStreamSinkNativeMessageFinalizer = Finalizer<PlatformPointer>(inner.drop_opaque_MutexOptionStreamSinkNativeMessage);
  Finalizer<PlatformPointer> get MutexOptionStreamSinkNativeMessageFinalizer => _MutexOptionStreamSinkNativeMessageFinalizer;
  late final Finalizer<PlatformPointer> _MutexWorldFinalizer = Finalizer<PlatformPointer>(inner.drop_opaque_MutexWorld);
  Finalizer<PlatformPointer> get MutexWorldFinalizer => _MutexWorldFinalizer;
}

// Section: WASM wire module

@JS('wasm_bindgen')
external NativeWasmModule get wasmModule;

@JS()
@anonymous
class NativeWasmModule implements WasmModule {
  external Object /* Promise */ call([String? moduleName]);
  external NativeWasmModule bind(dynamic thisArg, String moduleName);
  external dynamic /* void */ wire_create_world_manager(NativePortType port_);

  external dynamic /* void */ wire_what_is_the_answer(NativePortType port_);

  external dynamic /* void */ wire_add_entity__method__WorldManager(NativePortType port_, List<dynamic> that, String entity);

  external dynamic /* void */ wire_entities__method__WorldManager(NativePortType port_, List<dynamic> that);

  external dynamic /* void */ wire_create_message_stream__method__WorldManager(NativePortType port_, List<dynamic> that);

  external dynamic /*  */ drop_opaque_MutexOptionStreamSinkNativeMessage(ptr);

  external int /* *const c_void */ share_opaque_MutexOptionStreamSinkNativeMessage(ptr);

  external dynamic /*  */ drop_opaque_MutexWorld(ptr);

  external int /* *const c_void */ share_opaque_MutexWorld(ptr);
}

// Section: WASM wire connector

class NativeWire extends FlutterRustBridgeWasmWireBase<NativeWasmModule> {
  NativeWire(FutureOr<WasmModule> module) : super(WasmModule.cast<NativeWasmModule>(module));

  void wire_create_world_manager(NativePortType port_) => wasmModule.wire_create_world_manager(port_);

  void wire_what_is_the_answer(NativePortType port_) => wasmModule.wire_what_is_the_answer(port_);

  void wire_add_entity__method__WorldManager(NativePortType port_, List<dynamic> that, String entity) => wasmModule.wire_add_entity__method__WorldManager(port_, that, entity);

  void wire_entities__method__WorldManager(NativePortType port_, List<dynamic> that) => wasmModule.wire_entities__method__WorldManager(port_, that);

  void wire_create_message_stream__method__WorldManager(NativePortType port_, List<dynamic> that) => wasmModule.wire_create_message_stream__method__WorldManager(port_, that);

  dynamic /*  */ drop_opaque_MutexOptionStreamSinkNativeMessage(ptr) => wasmModule.drop_opaque_MutexOptionStreamSinkNativeMessage(ptr);

  int /* *const c_void */ share_opaque_MutexOptionStreamSinkNativeMessage(ptr) => wasmModule.share_opaque_MutexOptionStreamSinkNativeMessage(ptr);

  dynamic /*  */ drop_opaque_MutexWorld(ptr) => wasmModule.drop_opaque_MutexWorld(ptr);

  int /* *const c_void */ share_opaque_MutexWorld(ptr) => wasmModule.share_opaque_MutexWorld(ptr);
}
