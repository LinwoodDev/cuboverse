// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'bridge_generated.io.dart' if (dart.library.html) 'bridge_generated.web.dart';
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'ffi.io.dart' if (dart.library.html) 'ffi.web.dart';

abstract class Native {
  Future<WorldManager> createWorldManager({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateWorldManagerConstMeta;

  Future<int> whatIsTheAnswer({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWhatIsTheAnswerConstMeta;

  Future<void> addEntityMethodWorldManager({required WorldManager that, required String entity, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddEntityMethodWorldManagerConstMeta;

  Future<int> entitiesMethodWorldManager({required WorldManager that, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kEntitiesMethodWorldManagerConstMeta;

  DropFnType get dropOpaqueMutexWorld;
  ShareFnType get shareOpaqueMutexWorld;
  OpaqueTypeFinalizer get MutexWorldFinalizer;
}

@sealed
class MutexWorld extends FrbOpaque {
  MutexWorld.fromRaw(
    int ptr,
    int size,
  ) : super.unsafe(ptr, size);
  @override
  DropFnType get dropFn => api.dropOpaqueMutexWorld;

  @override
  ShareFnType get shareFn => api.shareOpaqueMutexWorld;

  @override
  OpaqueTypeFinalizer get staticFinalizer => api.MutexWorldFinalizer;
}

class WorldManager {
  final MutexWorld world;

  const WorldManager({
    required this.world,
  });

  Future<void> addEntity({required String entity, dynamic hint}) => api.addEntityMethodWorldManager(
        that: this,
        entity: entity,
      );

  Future<int> entities({dynamic hint}) => api.entitiesMethodWorldManager(
        that: this,
      );
}
