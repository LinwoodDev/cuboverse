// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.81.0.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'ffi.io.dart' if (dart.library.html) 'ffi.web.dart';
import 'bridge_generated.dart';
export 'bridge_generated.dart';
import 'dart:ffi' as ffi;

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  wire_MutexPlayer api2wire_MutexPlayer(MutexPlayer raw) {
    final ptr = inner.new_MutexPlayer();
    _api_fill_to_wire_MutexPlayer(raw, ptr);
    return ptr;
  }

  @protected
  wire_MutexVecChunkLocation api2wire_MutexVecChunkLocation(MutexVecChunkLocation raw) {
    final ptr = inner.new_MutexVecChunkLocation();
    _api_fill_to_wire_MutexVecChunkLocation(raw, ptr);
    return ptr;
  }

  @protected
  wire_MutexWorld api2wire_MutexWorld(MutexWorld raw) {
    final ptr = inner.new_MutexWorld();
    _api_fill_to_wire_MutexWorld(raw, ptr);
    return ptr;
  }

  @protected
  wire_MutexWorldMessenger api2wire_MutexWorldMessenger(MutexWorldMessenger raw) {
    final ptr = inner.new_MutexWorldMessenger();
    _api_fill_to_wire_MutexWorldMessenger(raw, ptr);
    return ptr;
  }

  @protected
  wire_MutexWorldTicker api2wire_MutexWorldTicker(MutexWorldTicker raw) {
    final ptr = inner.new_MutexWorldTicker();
    _api_fill_to_wire_MutexWorldTicker(raw, ptr);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_box_autoadd_bool(bool raw) {
    return inner.new_box_autoadd_bool_0(api2wire_bool(raw));
  }

  @protected
  ffi.Pointer<ffi.Double> api2wire_box_autoadd_f64(double raw) {
    return inner.new_box_autoadd_f64_0(api2wire_f64(raw));
  }

  @protected
  ffi.Pointer<wire_GlobalBlockPosition> api2wire_box_autoadd_global_block_position(GlobalBlockPosition raw) {
    final ptr = inner.new_box_autoadd_global_block_position_0();
    _api_fill_to_wire_global_block_position(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_WorldManager> api2wire_box_autoadd_world_manager(WorldManager raw) {
    final ptr = inner.new_box_autoadd_world_manager_0();
    _api_fill_to_wire_world_manager(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Bool> api2wire_opt_box_autoadd_bool(bool? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_bool(raw);
  }

  @protected
  ffi.Pointer<ffi.Double> api2wire_opt_box_autoadd_f64(double? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_f64(raw);
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

  late final OpaqueTypeFinalizer _MutexPlayerFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_MutexPlayerPtr);
  OpaqueTypeFinalizer get MutexPlayerFinalizer => _MutexPlayerFinalizer;
  late final OpaqueTypeFinalizer _MutexVecChunkLocationFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_MutexVecChunkLocationPtr);
  OpaqueTypeFinalizer get MutexVecChunkLocationFinalizer => _MutexVecChunkLocationFinalizer;
  late final OpaqueTypeFinalizer _MutexWorldFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_MutexWorldPtr);
  OpaqueTypeFinalizer get MutexWorldFinalizer => _MutexWorldFinalizer;
  late final OpaqueTypeFinalizer _MutexWorldMessengerFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_MutexWorldMessengerPtr);
  OpaqueTypeFinalizer get MutexWorldMessengerFinalizer => _MutexWorldMessengerFinalizer;
  late final OpaqueTypeFinalizer _MutexWorldTickerFinalizer = OpaqueTypeFinalizer(inner._drop_opaque_MutexWorldTickerPtr);
  OpaqueTypeFinalizer get MutexWorldTickerFinalizer => _MutexWorldTickerFinalizer;
// Section: api_fill_to_wire

  void _api_fill_to_wire_MutexPlayer(MutexPlayer apiObj, wire_MutexPlayer wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MutexVecChunkLocation(MutexVecChunkLocation apiObj, wire_MutexVecChunkLocation wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MutexWorld(MutexWorld apiObj, wire_MutexWorld wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MutexWorldMessenger(MutexWorldMessenger apiObj, wire_MutexWorldMessenger wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_MutexWorldTicker(MutexWorldTicker apiObj, wire_MutexWorldTicker wireObj) {
    wireObj.ptr = apiObj.shareOrMove();
  }

  void _api_fill_to_wire_block_position(BlockPosition apiObj, wire_BlockPosition wireObj) {
    wireObj.field0 = api2wire_i8(apiObj.field0);
    wireObj.field1 = api2wire_i8(apiObj.field1);
    wireObj.field2 = api2wire_i8(apiObj.field2);
  }

  void _api_fill_to_wire_box_autoadd_global_block_position(GlobalBlockPosition apiObj, ffi.Pointer<wire_GlobalBlockPosition> wireObj) {
    _api_fill_to_wire_global_block_position(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_world_manager(WorldManager apiObj, ffi.Pointer<wire_WorldManager> wireObj) {
    _api_fill_to_wire_world_manager(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_chunk_location(ChunkLocation apiObj, wire_ChunkLocation wireObj) {
    wireObj.field0 = api2wire_i32(apiObj.field0);
    wireObj.field1 = api2wire_i32(apiObj.field1);
    wireObj.field2 = api2wire_i32(apiObj.field2);
  }

  void _api_fill_to_wire_global_block_position(GlobalBlockPosition apiObj, wire_GlobalBlockPosition wireObj) {
    _api_fill_to_wire_chunk_location(apiObj.field0, wireObj.field0);
    _api_fill_to_wire_block_position(apiObj.field1, wireObj.field1);
  }

  void _api_fill_to_wire_world_manager(WorldManager apiObj, wire_WorldManager wireObj) {
    wireObj.world = api2wire_MutexWorld(apiObj.world);
    wireObj.messenger = api2wire_MutexWorldMessenger(apiObj.messenger);
    wireObj.loaded_chunks = api2wire_MutexVecChunkLocation(apiObj.loadedChunks);
    wireObj.player = api2wire_MutexPlayer(apiObj.player);
    wireObj.update_thread = api2wire_MutexWorldTicker(apiObj.updateThread);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr = _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_create_world_manager(
    int port_,
  ) {
    return _wire_create_world_manager(
      port_,
    );
  }

  late final _wire_create_world_managerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_world_manager');
  late final _wire_create_world_manager = _wire_create_world_managerPtr.asFunction<void Function(int)>();

  void wire_what_is_the_answer(
    int port_,
  ) {
    return _wire_what_is_the_answer(
      port_,
    );
  }

  late final _wire_what_is_the_answerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_what_is_the_answer');
  late final _wire_what_is_the_answer = _wire_what_is_the_answerPtr.asFunction<void Function(int)>();

  void wire_add_block__method__WorldManager(
    int port_,
    ffi.Pointer<wire_WorldManager> that,
    ffi.Pointer<wire_GlobalBlockPosition> position,
    ffi.Pointer<wire_uint_8_list> block,
  ) {
    return _wire_add_block__method__WorldManager(
      port_,
      that,
      position,
      block,
    );
  }

  late final _wire_add_block__method__WorldManagerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_WorldManager>, ffi.Pointer<wire_GlobalBlockPosition>, ffi.Pointer<wire_uint_8_list>)>>('wire_add_block__method__WorldManager');
  late final _wire_add_block__method__WorldManager = _wire_add_block__method__WorldManagerPtr.asFunction<void Function(int, ffi.Pointer<wire_WorldManager>, ffi.Pointer<wire_GlobalBlockPosition>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_remove_block__method__WorldManager(
    int port_,
    ffi.Pointer<wire_WorldManager> that,
    ffi.Pointer<wire_GlobalBlockPosition> position,
  ) {
    return _wire_remove_block__method__WorldManager(
      port_,
      that,
      position,
    );
  }

  late final _wire_remove_block__method__WorldManagerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_WorldManager>, ffi.Pointer<wire_GlobalBlockPosition>)>>('wire_remove_block__method__WorldManager');
  late final _wire_remove_block__method__WorldManager = _wire_remove_block__method__WorldManagerPtr.asFunction<void Function(int, ffi.Pointer<wire_WorldManager>, ffi.Pointer<wire_GlobalBlockPosition>)>();

  void wire_add_entity__method__WorldManager(
    int port_,
    ffi.Pointer<wire_WorldManager> that,
    ffi.Pointer<wire_uint_8_list> entity,
  ) {
    return _wire_add_entity__method__WorldManager(
      port_,
      that,
      entity,
    );
  }

  late final _wire_add_entity__method__WorldManagerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_WorldManager>, ffi.Pointer<wire_uint_8_list>)>>('wire_add_entity__method__WorldManager');
  late final _wire_add_entity__method__WorldManager = _wire_add_entity__method__WorldManagerPtr.asFunction<void Function(int, ffi.Pointer<wire_WorldManager>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_entities__method__WorldManager(
    int port_,
    ffi.Pointer<wire_WorldManager> that,
  ) {
    return _wire_entities__method__WorldManager(
      port_,
      that,
    );
  }

  late final _wire_entities__method__WorldManagerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_WorldManager>)>>('wire_entities__method__WorldManager');
  late final _wire_entities__method__WorldManager = _wire_entities__method__WorldManagerPtr.asFunction<void Function(int, ffi.Pointer<wire_WorldManager>)>();

  void wire_create_message_stream__method__WorldManager(
    int port_,
    ffi.Pointer<wire_WorldManager> that,
  ) {
    return _wire_create_message_stream__method__WorldManager(
      port_,
      that,
    );
  }

  late final _wire_create_message_stream__method__WorldManagerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_WorldManager>)>>('wire_create_message_stream__method__WorldManager');
  late final _wire_create_message_stream__method__WorldManager = _wire_create_message_stream__method__WorldManagerPtr.asFunction<void Function(int, ffi.Pointer<wire_WorldManager>)>();

  void wire_close__method__WorldManager(
    int port_,
    ffi.Pointer<wire_WorldManager> that,
  ) {
    return _wire_close__method__WorldManager(
      port_,
      that,
    );
  }

  late final _wire_close__method__WorldManagerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_WorldManager>)>>('wire_close__method__WorldManager');
  late final _wire_close__method__WorldManager = _wire_close__method__WorldManagerPtr.asFunction<void Function(int, ffi.Pointer<wire_WorldManager>)>();

  void wire_player_position__method__WorldManager(
    int port_,
    ffi.Pointer<wire_WorldManager> that,
  ) {
    return _wire_player_position__method__WorldManager(
      port_,
      that,
    );
  }

  late final _wire_player_position__method__WorldManagerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_WorldManager>)>>('wire_player_position__method__WorldManager');
  late final _wire_player_position__method__WorldManager = _wire_player_position__method__WorldManagerPtr.asFunction<void Function(int, ffi.Pointer<wire_WorldManager>)>();

  void wire_move_player__method__WorldManager(
    int port_,
    ffi.Pointer<wire_WorldManager> that,
    ffi.Pointer<ffi.Double> x,
    ffi.Pointer<ffi.Double> y,
    ffi.Pointer<ffi.Double> z,
    ffi.Pointer<ffi.Bool> relative,
    ffi.Pointer<ffi.Bool> teleport,
  ) {
    return _wire_move_player__method__WorldManager(
      port_,
      that,
      x,
      y,
      z,
      relative,
      teleport,
    );
  }

  late final _wire_move_player__method__WorldManagerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_WorldManager>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Bool>)>>('wire_move_player__method__WorldManager');
  late final _wire_move_player__method__WorldManager = _wire_move_player__method__WorldManagerPtr.asFunction<void Function(int, ffi.Pointer<wire_WorldManager>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Bool>, ffi.Pointer<ffi.Bool>)>();

  void wire_player_on_ground__method__WorldManager(
    int port_,
    ffi.Pointer<wire_WorldManager> that,
  ) {
    return _wire_player_on_ground__method__WorldManager(
      port_,
      that,
    );
  }

  late final _wire_player_on_ground__method__WorldManagerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_WorldManager>)>>('wire_player_on_ground__method__WorldManager');
  late final _wire_player_on_ground__method__WorldManager = _wire_player_on_ground__method__WorldManagerPtr.asFunction<void Function(int, ffi.Pointer<wire_WorldManager>)>();

  wire_MutexPlayer new_MutexPlayer() {
    return _new_MutexPlayer();
  }

  late final _new_MutexPlayerPtr = _lookup<ffi.NativeFunction<wire_MutexPlayer Function()>>('new_MutexPlayer');
  late final _new_MutexPlayer = _new_MutexPlayerPtr.asFunction<wire_MutexPlayer Function()>();

  wire_MutexVecChunkLocation new_MutexVecChunkLocation() {
    return _new_MutexVecChunkLocation();
  }

  late final _new_MutexVecChunkLocationPtr = _lookup<ffi.NativeFunction<wire_MutexVecChunkLocation Function()>>('new_MutexVecChunkLocation');
  late final _new_MutexVecChunkLocation = _new_MutexVecChunkLocationPtr.asFunction<wire_MutexVecChunkLocation Function()>();

  wire_MutexWorld new_MutexWorld() {
    return _new_MutexWorld();
  }

  late final _new_MutexWorldPtr = _lookup<ffi.NativeFunction<wire_MutexWorld Function()>>('new_MutexWorld');
  late final _new_MutexWorld = _new_MutexWorldPtr.asFunction<wire_MutexWorld Function()>();

  wire_MutexWorldMessenger new_MutexWorldMessenger() {
    return _new_MutexWorldMessenger();
  }

  late final _new_MutexWorldMessengerPtr = _lookup<ffi.NativeFunction<wire_MutexWorldMessenger Function()>>('new_MutexWorldMessenger');
  late final _new_MutexWorldMessenger = _new_MutexWorldMessengerPtr.asFunction<wire_MutexWorldMessenger Function()>();

  wire_MutexWorldTicker new_MutexWorldTicker() {
    return _new_MutexWorldTicker();
  }

  late final _new_MutexWorldTickerPtr = _lookup<ffi.NativeFunction<wire_MutexWorldTicker Function()>>('new_MutexWorldTicker');
  late final _new_MutexWorldTicker = _new_MutexWorldTickerPtr.asFunction<wire_MutexWorldTicker Function()>();

  ffi.Pointer<ffi.Bool> new_box_autoadd_bool_0(
    bool value,
  ) {
    return _new_box_autoadd_bool_0(
      value,
    );
  }

  late final _new_box_autoadd_bool_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Bool> Function(ffi.Bool)>>('new_box_autoadd_bool_0');
  late final _new_box_autoadd_bool_0 = _new_box_autoadd_bool_0Ptr.asFunction<ffi.Pointer<ffi.Bool> Function(bool)>();

  ffi.Pointer<ffi.Double> new_box_autoadd_f64_0(
    double value,
  ) {
    return _new_box_autoadd_f64_0(
      value,
    );
  }

  late final _new_box_autoadd_f64_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Double> Function(ffi.Double)>>('new_box_autoadd_f64_0');
  late final _new_box_autoadd_f64_0 = _new_box_autoadd_f64_0Ptr.asFunction<ffi.Pointer<ffi.Double> Function(double)>();

  ffi.Pointer<wire_GlobalBlockPosition> new_box_autoadd_global_block_position_0() {
    return _new_box_autoadd_global_block_position_0();
  }

  late final _new_box_autoadd_global_block_position_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_GlobalBlockPosition> Function()>>('new_box_autoadd_global_block_position_0');
  late final _new_box_autoadd_global_block_position_0 = _new_box_autoadd_global_block_position_0Ptr.asFunction<ffi.Pointer<wire_GlobalBlockPosition> Function()>();

  ffi.Pointer<wire_WorldManager> new_box_autoadd_world_manager_0() {
    return _new_box_autoadd_world_manager_0();
  }

  late final _new_box_autoadd_world_manager_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_WorldManager> Function()>>('new_box_autoadd_world_manager_0');
  late final _new_box_autoadd_world_manager_0 = _new_box_autoadd_world_manager_0Ptr.asFunction<ffi.Pointer<wire_WorldManager> Function()>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void drop_opaque_MutexPlayer(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexPlayer(
      ptr,
    );
  }

  late final _drop_opaque_MutexPlayerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_MutexPlayer');
  late final _drop_opaque_MutexPlayer = _drop_opaque_MutexPlayerPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexPlayer(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexPlayer(
      ptr,
    );
  }

  late final _share_opaque_MutexPlayerPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_MutexPlayer');
  late final _share_opaque_MutexPlayer = _share_opaque_MutexPlayerPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MutexVecChunkLocation(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexVecChunkLocation(
      ptr,
    );
  }

  late final _drop_opaque_MutexVecChunkLocationPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_MutexVecChunkLocation');
  late final _drop_opaque_MutexVecChunkLocation = _drop_opaque_MutexVecChunkLocationPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexVecChunkLocation(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexVecChunkLocation(
      ptr,
    );
  }

  late final _share_opaque_MutexVecChunkLocationPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_MutexVecChunkLocation');
  late final _share_opaque_MutexVecChunkLocation = _share_opaque_MutexVecChunkLocationPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MutexWorld(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexWorld(
      ptr,
    );
  }

  late final _drop_opaque_MutexWorldPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_MutexWorld');
  late final _drop_opaque_MutexWorld = _drop_opaque_MutexWorldPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexWorld(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexWorld(
      ptr,
    );
  }

  late final _share_opaque_MutexWorldPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_MutexWorld');
  late final _share_opaque_MutexWorld = _share_opaque_MutexWorldPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MutexWorldMessenger(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexWorldMessenger(
      ptr,
    );
  }

  late final _drop_opaque_MutexWorldMessengerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_MutexWorldMessenger');
  late final _drop_opaque_MutexWorldMessenger = _drop_opaque_MutexWorldMessengerPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexWorldMessenger(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexWorldMessenger(
      ptr,
    );
  }

  late final _share_opaque_MutexWorldMessengerPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_MutexWorldMessenger');
  late final _share_opaque_MutexWorldMessenger = _share_opaque_MutexWorldMessengerPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void drop_opaque_MutexWorldTicker(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _drop_opaque_MutexWorldTicker(
      ptr,
    );
  }

  late final _drop_opaque_MutexWorldTickerPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>('drop_opaque_MutexWorldTicker');
  late final _drop_opaque_MutexWorldTicker = _drop_opaque_MutexWorldTickerPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> share_opaque_MutexWorldTicker(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _share_opaque_MutexWorldTicker(
      ptr,
    );
  }

  late final _share_opaque_MutexWorldTickerPtr = _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>('share_opaque_MutexWorldTicker');
  late final _share_opaque_MutexWorldTicker = _share_opaque_MutexWorldTickerPtr.asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr = _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_MutexWorld extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_MutexWorldMessenger extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_MutexVecChunkLocation extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_MutexPlayer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_MutexWorldTicker extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ptr;
}

final class wire_WorldManager extends ffi.Struct {
  external wire_MutexWorld world;

  external wire_MutexWorldMessenger messenger;

  external wire_MutexVecChunkLocation loaded_chunks;

  external wire_MutexPlayer player;

  external wire_MutexWorldTicker update_thread;
}

final class wire_ChunkLocation extends ffi.Struct {
  @ffi.Int32()
  external int field0;

  @ffi.Int32()
  external int field1;

  @ffi.Int32()
  external int field2;
}

final class wire_BlockPosition extends ffi.Struct {
  @ffi.Int8()
  external int field0;

  @ffi.Int8()
  external int field1;

  @ffi.Int8()
  external int field2;
}

final class wire_GlobalBlockPosition extends ffi.Struct {
  external wire_ChunkLocation field0;

  external wire_BlockPosition field1;
}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
